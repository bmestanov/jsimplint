/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,4],$V2=[1,45],$V3=[1,44],$V4=[1,18],$V5=[1,6],$V6=[1,7],$V7=[1,8],$V8=[1,11],$V9=[1,12],$Va=[1,13],$Vb=[1,14],$Vc=[1,17],$Vd=[1,19],$Ve=[1,37],$Vf=[1,36],$Vg=[1,35],$Vh=[1,39],$Vi=[1,40],$Vj=[1,42],$Vk=[1,43],$Vl=[1,47],$Vm=[1,54],$Vn=[1,53],$Vo=[1,55],$Vp=[1,56],$Vq=[1,57],$Vr=[1,58],$Vs=[5,6,7,8,15,18,19,22,28,29,30,31,33,34,84,85,92,95,97,98,99,100,114,115,116,117,118,119],$Vt=[5,6,7,8,15,17,18,19,21,22,28,29,30,31,33,34,84,85,92,95,97,98,99,100,114,115,116,117,118,119],$Vu=[1,62],$Vv=[2,36],$Vw=[2,10],$Vx=[1,79],$Vy=[5,6,7,8,15,17,18,19,21,22,26,28,29,30,31,33,34,84,85,92,95,97,98,99,100,114,115,116,117,118,119],$Vz=[5,6,7,8,10,15,17,18,19,21,22,26,28,29,30,31,33,34,84,85,92,95,97,98,99,100,106,114,115,116,117,118,119],$VA=[5,6,7,8,10,14,15,17,18,19,21,22,26,28,29,30,31,33,34,37,41,42,43,44,45,46,47,48,49,50,51,54,84,85,92,95,97,98,99,100,106,114,115,116,117,118,119],$VB=[5,6,7,8,10,14,15,17,18,19,21,22,26,28,29,30,31,33,34,37,41,42,43,44,45,46,47,48,49,50,51,53,54,84,85,92,95,97,98,99,100,106,114,115,116,117,118,119],$VC=[5,6,7,8,10,14,15,17,18,19,21,22,26,28,29,30,31,33,34,37,41,42,43,44,45,46,47,48,49,50,51,53,54,56,84,85,92,95,97,98,99,100,106,114,115,116,117,118,119],$VD=[5,6,7,8,10,14,15,17,18,19,21,22,26,28,29,30,31,33,34,37,41,42,43,44,45,46,47,48,49,50,51,53,54,56,58,84,85,92,95,97,98,99,100,106,114,115,116,117,118,119],$VE=[5,6,7,8,10,14,15,17,18,19,21,22,26,28,29,30,31,33,34,37,41,42,43,44,45,46,47,48,49,50,51,53,54,56,58,60,84,85,92,95,97,98,99,100,106,114,115,116,117,118,119],$VF=[5,6,7,8,10,14,15,17,18,19,21,22,26,28,29,30,31,33,34,37,41,42,43,44,45,46,47,48,49,50,51,53,54,56,58,60,62,84,85,92,95,97,98,99,100,106,114,115,116,117,118,119],$VG=[5,6,7,8,10,14,15,17,18,19,21,22,26,28,29,30,31,33,34,37,41,42,43,44,45,46,47,48,49,50,51,53,54,56,58,60,62,64,84,85,92,95,97,98,99,100,106,114,115,116,117,118,119],$VH=[5,6,7,8,10,14,15,17,18,19,21,22,26,28,29,30,31,33,34,37,41,42,43,44,45,46,47,48,49,50,51,53,54,56,58,60,62,64,67,68,69,70,73,74,75,76,84,85,92,95,97,98,99,100,106,114,115,116,117,118,119],$VI=[5,6,7,8,10,14,15,17,18,19,21,22,26,28,29,30,31,33,34,37,41,42,43,44,45,46,47,48,49,50,51,53,54,56,58,60,62,64,67,68,69,70,73,74,75,76,79,80,81,84,85,92,95,97,98,99,100,106,114,115,116,117,118,119],$VJ=[1,131],$VK=[5,6,7,10,14,15,17,18,19,21,22,26,28,29,30,31,33,34,37,41,42,43,44,45,46,47,48,49,50,51,53,54,56,58,60,62,64,67,68,69,70,73,74,75,76,79,80,81,84,85,88,89,90,92,95,97,98,99,100,106,114,115,116,117,118,119],$VL=[7,8,100,114,115,116,117,118,119],$VM=[5,6,7,8,10,14,15,17,18,19,21,22,26,28,29,30,31,33,34,37,41,42,43,44,45,46,47,48,49,50,51,53,54,56,58,60,62,64,67,68,69,70,73,74,75,76,79,80,81,84,85,88,89,90,92,95,97,98,99,100,101,105,106,114,115,116,117,118,119],$VN=[5,6,17,21],$VO=[2,12],$VP=[5,6,7,8,14,15,17,18,19,21,22,26,28,29,30,31,33,34,84,85,92,95,97,98,99,100,114,115,116,117,118,119],$VQ=[7,8,84,85,92,95,97,98,99,100,114,115,116,117,118,119],$VR=[5,6,7,8,10,14,15,17,18,19,21,22,26,28,29,30,31,33,34,37,41,42,43,44,45,46,47,48,49,50,51,53,54,56,58,60,62,64,67,68,69,70,73,74,75,76,79,80,81,84,85,88,89,90,92,95,97,98,99,100,106,114,115,116,117,118,119],$VS=[2,113],$VT=[1,174];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Program":3,"Element":4,"EOF":5,"KEYWORD_FUNCTION":6,"IDENTIFIER":7,"(":8,"ParameterListOpt":9,")":10,"CompoundStatement":11,"Statement":12,"ParameterList":13,",":14,"{":15,"Statements":16,"}":17,";":18,"KEYWORD_IF":19,"Condition":20,"KEYWORD_ELSE":21,"KEYWORD_WHILE":22,"ForParen":23,"ExpressionOpt":24,"ForBegin":25,"KEYWORD_IN":26,"Expression":27,"KEYWORD_BREAK":28,"KEYWORD_CONTINUE":29,"KEYWORD_WITH":30,"KEYWORD_RETURN":31,"VariablesOrExpression":32,"KEYWORD_FOR":33,"KEYWORD_VAR":34,"Variables":35,"Variable":36,"=":37,"AssignmentExpression":38,"ConditionalExpression":39,"AssignmentOperator":40,">>>=":41,">>=":42,"<<=":43,"|=":44,"^=":45,"&=":46,"+=":47,"-=":48,"*=":49,"/=":50,"%=":51,"OrExpression":52,"?":53,":":54,"AndExpression":55,"||":56,"BitwiseOrExpression":57,"&&":58,"BitwiseXorExpression":59,"|":60,"BitwiseAndExpression":61,"^":62,"EqualityExpression":63,"&":64,"RelationalExpression":65,"EqualityOperator":66,"==":67,"===":68,"!=":69,"!==":70,"ShiftExpression":71,"RelationalOperator":72,"<=":73,"<":74,">=":75,">":76,"AdditiveExpression":77,"ShiftOperator":78,"<<":79,">>>":80,">>":81,"MultiplicativeExpression":82,"AdditiveOperator":83,"+":84,"-":85,"UnaryExpression":86,"MultiplicativeOperator":87,"*":88,"/":89,"%":90,"MemberExpression":91,"UnaryOperator":92,"PrefixOperator":93,"PostfixOperator":94,"KEYWORD_NEW":95,"Constructor":96,"KEYWORD_DELETE":97,"++":98,"--":99,"KEYWORD_THIS":100,".":101,"CallExpression":102,"ArgumentListOpt":103,"PrimaryExpression":104,"[":105,"]":106,"ArgumentList":107,"Literal":108,"NullLiteral":109,"UndefinedLiteral":110,"BooleanLiteral":111,"NumericLiteral":112,"StringLiteral":113,"KEYWORD_UNDEFINED":114,"KEYWORD_NULL":115,"KEYWORD_TRUE":116,"KEYWORD_FALSE":117,"NUMERIC_LITERAL":118,"STRING_LITERAL":119,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"KEYWORD_FUNCTION",7:"IDENTIFIER",8:"(",10:")",14:",",15:"{",17:"}",18:";",19:"KEYWORD_IF",21:"KEYWORD_ELSE",22:"KEYWORD_WHILE",26:"KEYWORD_IN",28:"KEYWORD_BREAK",29:"KEYWORD_CONTINUE",30:"KEYWORD_WITH",31:"KEYWORD_RETURN",33:"KEYWORD_FOR",34:"KEYWORD_VAR",37:"=",41:">>>=",42:">>=",43:"<<=",44:"|=",45:"^=",46:"&=",47:"+=",48:"-=",49:"*=",50:"/=",51:"%=",53:"?",54:":",56:"||",58:"&&",60:"|",62:"^",64:"&",67:"==",68:"===",69:"!=",70:"!==",73:"<=",74:"<",75:">=",76:">",79:"<<",80:">>>",81:">>",84:"+",85:"-",88:"*",89:"/",90:"%",92:"UnaryOperator",95:"KEYWORD_NEW",97:"KEYWORD_DELETE",98:"++",99:"--",100:"KEYWORD_THIS",101:".",105:"[",106:"]",114:"KEYWORD_UNDEFINED",115:"KEYWORD_NULL",116:"KEYWORD_TRUE",117:"KEYWORD_FALSE",118:"NUMERIC_LITERAL",119:"STRING_LITERAL"},
productions_: [0,[3,2],[3,1],[4,6],[4,1],[9,0],[9,1],[13,1],[13,3],[11,3],[16,0],[16,2],[12,0],[12,1],[12,3],[12,5],[12,3],[12,7],[12,7],[12,5],[12,2],[12,2],[12,5],[12,3],[12,1],[12,1],[12,2],[20,3],[23,2],[25,2],[32,2],[32,1],[35,1],[35,3],[36,1],[36,3],[24,0],[24,1],[27,1],[27,3],[38,1],[38,3],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[39,1],[39,5],[52,1],[52,3],[55,1],[55,3],[57,1],[57,3],[59,1],[59,3],[61,1],[61,3],[63,1],[63,3],[66,1],[66,1],[66,1],[66,1],[65,1],[65,3],[72,1],[72,1],[72,1],[72,1],[71,1],[71,3],[78,1],[78,1],[78,1],[77,1],[77,3],[83,1],[83,1],[82,1],[82,3],[87,1],[87,1],[87,1],[86,1],[86,2],[86,2],[86,2],[86,2],[86,2],[86,2],[86,2],[93,1],[93,1],[94,1],[94,1],[96,3],[96,1],[102,1],[102,4],[102,3],[91,1],[91,3],[91,4],[91,4],[103,0],[103,1],[107,1],[107,3],[104,3],[104,1],[104,1],[104,1],[108,1],[108,1],[108,1],[108,1],[108,1],[110,1],[109,1],[111,1],[111,1],[112,1],[113,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log(yy); return new yy.ProgramNode(); 
break;
}
},
table: [{3:1,4:2,5:$V0,6:$V1,7:$V2,8:$V3,11:15,12:5,15:$V4,18:$V5,19:$V6,22:$V7,23:9,25:10,27:20,28:$V8,29:$V9,30:$Va,31:$Vb,32:16,33:$Vc,34:$Vd,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{1:[3]},{3:59,4:2,5:$V0,6:$V1,7:$V2,8:$V3,11:15,12:5,15:$V4,18:$V5,19:$V6,22:$V7,23:9,25:10,27:20,28:$V8,29:$V9,30:$Va,31:$Vb,32:16,33:$Vc,34:$Vd,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{1:[2,2]},{7:[1,60]},o($Vs,[2,4]),o($Vt,[2,13]),{8:$Vu,20:61},{8:$Vu,20:63},{7:$V2,8:$V3,18:[1,64],27:20,32:65,34:$Vd,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{18:[1,66],26:[1,67]},{18:[1,68]},{18:[1,69]},{8:[1,70]},{7:$V2,8:$V3,18:$Vv,24:71,27:72,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},o($Vt,[2,24]),o([5,6,7,8,15,17,19,21,22,28,29,30,31,33,34,84,85,92,95,97,98,99,100,114,115,116,117,118,119],[2,25],{18:[1,73]}),{8:[1,74]},{7:$V2,8:$V3,11:15,12:76,15:$V4,16:75,17:$Vw,18:$V5,19:$V6,22:$V7,23:9,25:10,27:20,28:$V8,29:$V9,30:$Va,31:$Vb,32:16,33:$Vc,34:$Vd,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$Vx,35:77,36:78},o($Vy,[2,31]),o($Vz,[2,38],{14:[1,80]}),o([5,6,7,8,10,14,15,17,18,19,21,22,26,28,29,30,31,33,34,54,84,85,92,95,97,98,99,100,106,114,115,116,117,118,119],[2,40],{40:81,37:[1,82],41:[1,83],42:[1,84],43:[1,85],44:[1,86],45:[1,87],46:[1,88],47:[1,89],48:[1,90],49:[1,91],50:[1,92],51:[1,93]}),o($VA,[2,54],{53:[1,94]}),o($VB,[2,56],{56:[1,95]}),o($VC,[2,58],{58:[1,96]}),o($VD,[2,60],{60:[1,97]}),o($VE,[2,62],{62:[1,98]}),o($VF,[2,64],{64:[1,99]}),o($VG,[2,66],{66:100,72:101,67:[1,102],68:[1,103],69:[1,104],70:[1,105],73:[1,106],74:[1,107],75:[1,108],76:[1,109]}),o($VH,[2,72]),o($VH,[2,78],{78:110,79:[1,111],80:[1,112],81:[1,113]}),o([5,6,7,8,10,14,15,17,18,19,21,22,26,28,29,30,31,33,34,37,41,42,43,44,45,46,47,48,49,50,51,53,54,56,58,60,62,64,67,68,69,70,73,74,75,76,79,80,81,92,95,97,98,99,100,106,114,115,116,117,118,119],[2,83],{83:114,84:[1,115],85:[1,116]}),o($VI,[2,87],{87:117,88:[1,118],89:[1,119],90:[1,120]}),o([5,6,7,8,10,14,15,17,18,19,21,22,26,28,29,30,31,33,34,37,41,42,43,44,45,46,47,48,49,50,51,53,54,56,58,60,62,64,67,68,69,70,73,74,75,76,79,80,81,84,85,88,89,90,92,95,97,100,106,114,115,116,117,118,119],[2,92],{94:121,98:[1,122],99:[1,123]}),{7:$V2,8:$V3,84:$Ve,85:$Vf,86:124,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$V2,8:$V3,84:$Ve,85:$Vf,86:125,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$V2,8:$V3,84:$Ve,85:$Vf,86:126,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$V2,8:$V3,91:127,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$VJ,96:128,100:[1,129],102:130},{7:$V2,8:$V3,91:132,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},o($VK,[2,109],{8:[1,135],101:[1,133],105:[1,134]}),o($VL,[2,100]),o($VL,[2,101]),{7:$V2,8:$V3,27:136,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},o($VM,[2,118]),o($VM,[2,119]),o($VM,[2,120]),o($VM,[2,121]),o($VM,[2,122]),o($VM,[2,123]),o($VM,[2,124]),o($VM,[2,125]),o($VM,[2,127]),o($VM,[2,126]),o($VM,[2,128]),o($VM,[2,129]),o($VM,[2,130]),o($VM,[2,131]),{1:[2,1]},{8:[1,137]},o($VN,$VO,{23:9,25:10,11:15,32:16,27:20,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,86:33,91:34,93:38,104:41,108:46,109:48,110:49,111:50,112:51,113:52,12:138,7:$V2,8:$V3,15:$V4,18:$V5,19:$V6,22:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,33:$Vc,34:$Vd,84:$Ve,85:$Vf,92:$Vg,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr}),{7:$V2,8:$V3,27:139,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},o($VN,$VO,{23:9,25:10,11:15,32:16,27:20,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,86:33,91:34,93:38,104:41,108:46,109:48,110:49,111:50,112:51,113:52,12:140,7:$V2,8:$V3,15:$V4,18:$V5,19:$V6,22:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,33:$Vc,34:$Vd,84:$Ve,85:$Vf,92:$Vg,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr}),{7:$V2,8:$V3,18:$Vv,24:141,27:72,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},o([18,26],[2,29]),{7:$V2,8:$V3,18:$Vv,24:142,27:72,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$V2,8:$V3,27:143,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},o($Vt,[2,20]),o($Vt,[2,21]),{7:$V2,8:$V3,27:144,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{18:[1,145]},o([10,18],[2,37]),o($Vt,[2,26]),o([7,8,18,34,84,85,92,95,97,98,99,100,114,115,116,117,118,119],[2,28]),{17:[1,146]},{7:$V2,8:$V3,11:15,12:76,15:$V4,16:147,17:$Vw,18:$V5,19:$V6,22:$V7,23:9,25:10,27:20,28:$V8,29:$V9,30:$Va,31:$Vb,32:16,33:$Vc,34:$Vd,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},o($Vy,[2,30]),o($Vy,[2,32],{14:[1,148]}),o($VP,[2,34],{37:[1,149]}),{7:$V2,8:$V3,27:150,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$V2,8:$V3,38:151,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},o($VQ,[2,42]),o($VQ,[2,43]),o($VQ,[2,44]),o($VQ,[2,45]),o($VQ,[2,46]),o($VQ,[2,47]),o($VQ,[2,48]),o($VQ,[2,49]),o($VQ,[2,50]),o($VQ,[2,51]),o($VQ,[2,52]),o($VQ,[2,53]),{7:$V2,8:$V3,38:152,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$V2,8:$V3,52:153,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$V2,8:$V3,55:154,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$V2,8:$V3,57:155,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$V2,8:$V3,59:156,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$V2,8:$V3,61:157,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$V2,8:$V3,63:158,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$V2,8:$V3,71:159,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},o($VQ,[2,68]),o($VQ,[2,69]),o($VQ,[2,70]),o($VQ,[2,71]),o($VQ,[2,74]),o($VQ,[2,75]),o($VQ,[2,76]),o($VQ,[2,77]),{7:$V2,8:$V3,71:160,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},o($VQ,[2,80]),o($VQ,[2,81]),o($VQ,[2,82]),{7:$V2,8:$V3,77:161,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},o($VQ,[2,85]),o($VQ,[2,86]),{7:$V2,8:$V3,82:162,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},o($VQ,[2,89]),o($VQ,[2,90]),o($VQ,[2,91]),o($VR,[2,97]),o($VR,[2,102]),o($VR,[2,103]),o($VR,[2,93]),o($VR,[2,94]),o($VR,[2,95]),o($VR,[2,96]),o($VR,[2,98]),{101:[1,163]},o($VR,[2,105]),o($VK,[2,106],{8:[1,164],101:[1,165]}),o($VR,[2,99]),{7:$V2,8:$V3,91:166,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$V2,8:$V3,27:167,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$V2,8:$V3,10:$VS,38:170,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,103:168,104:41,107:169,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{10:[1,171]},{7:$VT,9:172,10:[2,5],13:173},o([5,6,7,8,15,17,18,19,22,28,29,30,31,33,34,84,85,92,95,97,98,99,100,114,115,116,117,118,119],[2,14],{21:[1,175]}),{10:[1,176]},o($Vt,[2,16]),{18:[1,177]},{18:[1,178]},{10:[1,179]},{10:[1,180]},o($Vt,[2,23]),o($Vt,[2,9]),{17:[2,11]},{7:$Vx,35:181,36:78},{7:$V2,8:$V3,38:182,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},o($Vz,[2,39]),o($VA,[2,41]),{54:[1,183]},o($VB,[2,57]),o($VC,[2,59]),o($VD,[2,61]),o($VE,[2,63]),o($VF,[2,65]),o($VG,[2,67]),o($VH,[2,73]),o($VH,[2,79]),o($VI,[2,84]),o($VI,[2,88]),{7:$VJ,102:184},{7:$V2,8:$V3,10:$VS,38:170,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,103:185,104:41,107:169,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$VJ,102:186},o($VR,[2,110]),{106:[1,187]},{10:[1,188]},{10:[2,114]},{10:[2,115],14:[1,189]},o($VM,[2,117]),{10:[1,190]},{10:[2,6]},{10:[2,7],14:[1,191]},o($VN,$VO,{23:9,25:10,11:15,32:16,27:20,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,86:33,91:34,93:38,104:41,108:46,109:48,110:49,111:50,112:51,113:52,12:192,7:$V2,8:$V3,15:$V4,18:$V5,19:$V6,22:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,33:$Vc,34:$Vd,84:$Ve,85:$Vf,92:$Vg,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr}),o($Vt,[2,27]),{7:$V2,8:$V3,10:$Vv,24:193,27:72,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{7:$V2,8:$V3,10:$Vv,24:194,27:72,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},o($VN,$VO,{23:9,25:10,11:15,32:16,27:20,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,86:33,91:34,93:38,104:41,108:46,109:48,110:49,111:50,112:51,113:52,12:195,7:$V2,8:$V3,15:$V4,18:$V5,19:$V6,22:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,33:$Vc,34:$Vd,84:$Ve,85:$Vf,92:$Vg,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr}),o($VN,$VO,{23:9,25:10,11:15,32:16,27:20,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,86:33,91:34,93:38,104:41,108:46,109:48,110:49,111:50,112:51,113:52,12:196,7:$V2,8:$V3,15:$V4,18:$V5,19:$V6,22:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,33:$Vc,34:$Vd,84:$Ve,85:$Vf,92:$Vg,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr}),o($Vy,[2,33]),o($VP,[2,35]),{7:$V2,8:$V3,38:197,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},o($VR,[2,104]),{10:[1,198]},o($VR,[2,108]),o($VR,[2,111]),o($VR,[2,112]),{7:$V2,8:$V3,38:170,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,84:$Ve,85:$Vf,86:33,91:34,92:$Vg,93:38,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,104:41,107:199,108:46,109:48,110:49,111:50,112:51,113:52,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr},{11:200,15:$V4},{7:$VT,13:201},o($Vt,[2,15]),{10:[1,202]},{10:[1,203]},o($Vt,[2,19]),o($Vt,[2,22]),o($VA,[2,55]),o($VR,[2,107]),{10:[2,116]},o($Vs,[2,3]),{10:[2,8]},o($VN,$VO,{23:9,25:10,11:15,32:16,27:20,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,86:33,91:34,93:38,104:41,108:46,109:48,110:49,111:50,112:51,113:52,12:204,7:$V2,8:$V3,15:$V4,18:$V5,19:$V6,22:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,33:$Vc,34:$Vd,84:$Ve,85:$Vf,92:$Vg,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr}),o($VN,$VO,{23:9,25:10,11:15,32:16,27:20,38:21,39:22,52:23,55:24,57:25,59:26,61:27,63:28,65:29,71:30,77:31,82:32,86:33,91:34,93:38,104:41,108:46,109:48,110:49,111:50,112:51,113:52,12:205,7:$V2,8:$V3,15:$V4,18:$V5,19:$V6,22:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,33:$Vc,34:$Vd,84:$Ve,85:$Vf,92:$Vg,95:$Vh,97:$Vi,98:$Vj,99:$Vk,100:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp,118:$Vq,119:$Vr}),o($Vt,[2,17]),o($Vt,[2,18])],
defaultActions: {3:[2,2],59:[2,1],147:[2,11],169:[2,114],173:[2,6],199:[2,116],201:[2,8]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return ">>>=";
break;
case 1:return ">>=";
break;
case 2:return "<<=";
break;
case 3:return "|=";
break;
case 4:return "^=";
break;
case 5:return "&=";
break;
case 6:return "+=";
break;
case 7:return "-=";
break;
case 8:return "*=";
break;
case 9:return "/=";
break;
case 10:return "%=";
break;
case 11:return ";";
break;
case 12:return ",";
break;
case 13:return "?";
break;
case 14:return ":";
break;
case 15:return "||";
break;
case 16:return "&&";
break;
case 17:return "|";
break;
case 18:return "^";
break;
case 19:return "&";
break;
case 20:return "===";
break;
case 21:return "==";
break;
case 22:return "=";
break;
case 23:return "!==";
break;
case 24:return "!=";
break;
case 25:return "<<";
break;
case 26:return "<=";
break;
case 27:return "<";
break;
case 28:return ">>>";
break;
case 29:return ">>";
break;
case 30:return ">=";
break;
case 31:return ">";
break;
case 32:return "++";
break;
case 33:return "--";
break;
case 34:return "+";
break;
case 35:return "-";
break;
case 36:return "*";
break;
case 37:return "/";
break;
case 38:return "%";
break;
case 39:return "!";
break;
case 40:return "~";
break;
case 41:return ".";
break;
case 42:return "[";
break;
case 43:return "]";
break;
case 44:return "{";
break;
case 45:return "}";
break;
case 46:return "(";
break;
case 47:return ")";
break;
case 48:return "KEYWORD_ABSTRACT";
break;
case 49:return "KEYWORD_BOOLEAN";
break;
case 50:return "KEYWORD_BREAK";
break;
case 51:return "KEYWORD_BYTE";
break;
case 52:return "KEYWORD_CASE";
break;
case 53:return "KEYWORD_CATCH";
break;
case 54:return "KEYWORD_CHAR";
break;
case 55:return "KEYWORD_CLASS";
break;
case 56:return "KEYWORD_CONST";
break;
case 57:return "KEYWORD_CONTINUE";
break;
case 58:return "KEYWORD_DEFAULT";
break;
case 59:return "KEYWORD_DELETE";
break;
case 60:return "KEYWORD_DO";
break;
case 61:return "KEYWORD_DOUBLE";
break;
case 62:return "KEYWORD_ELSE";
break;
case 63:return "KEYWORD_EXTENDS";
break;
case 64:return "KEYWORD_FINAL";
break;
case 65:return "KEYWORD_FINALLY";
break;
case 66:return "KEYWORD_FLOAT";
break;
case 67:return "KEYWORD_FOR";
break;
case 68:return "KEYWORD_FUNCTION";
break;
case 69:return "KEYWORD_GOTO";
break;
case 70:return "KEYWORD_IF";
break;
case 71:return "KEYWORD_IMPLEMENTS";
break;
case 72:return "KEYWORD_IMPORT";
break;
case 73:return "KEYWORD_IN";
break;
case 74:return "KEYWORD_INSTANCEOF";
break;
case 75:return "KEYWORD_INT";
break;
case 76:return "KEYWORD_INTERFACE";
break;
case 77:return "KEYWORD_LONG";
break;
case 78:return "KEYWORD_NATIVE";
break;
case 79:return "KEYWORD_NEW";
break;
case 80:return "KEYWORD_PACKAGE";
break;
case 81:return "KEYWORD_PRIVATE";
break;
case 82:return "KEYWORD_PROTECTED";
break;
case 83:return "KEYWORD_PUBLIC";
break;
case 84:return "KEYWORD_RETURN";
break;
case 85:return "KEYWORD_SHORT";
break;
case 86:return "KEYWORD_STATIC";
break;
case 87:return "KEYWORD_SUPER";
break;
case 88:return "KEYWORD_SWITCH";
break;
case 89:return "KEYWORD_SYNCHRONIZED";
break;
case 90:return "KEYWORD_THROW";
break;
case 91:return "KEYWORD_THROWS";
break;
case 92:return "KEYWORD_TRANSIENT";
break;
case 93:return "KEYWORD_TRY";
break;
case 94:return "KEYWORD_TYPEOF";
break;
case 95:return "KEYWORD_VAR";
break;
case 96:return "KEYWORD_VOID";
break;
case 97:return "KEYWORD_VOLATILE";
break;
case 98:return "KEYWORD_WHILE";
break;
case 99:return "KEYWORD_WITH";
break;
case 100:return "KEYWORD_BREAK";
break;
case 101:return "KEYWORD_CONTINUE";
break;
case 102:return "KEYWORD_DELETE";
break;
case 103:return "KEYWORD_ELSE";
break;
case 104:return "KEYWORD_FOR";
break;
case 105:return "KEYWORD_FUNCTION";
break;
case 106:return "KEYWORD_IF";
break;
case 107:return "KEYWORD_IN";
break;
case 108:return "KEYWORD_NEW";
break;
case 109:return "KEYWORD_RETURN";
break;
case 110:return "KEYWORD_THIS";
break;
case 111:return "KEYWORD_TYPEOF";
break;
case 112:return "KEYWORD_VAR";
break;
case 113:return "KEYWORD_VOID";
break;
case 114:return "KEYWORD_WHILE";
break;
case 115:return "KEYWORD_WITH";
break;
case 116:return "EOF";
break;
case 117:return "STRING_LITERAL";
break;
case 118:return "IDENTIFIER";
break;
case 119:return "NUMERIC_LITERAL";
break;
case 120:return "NUMERIC_LITERAL";
break;
case 121:return "NUMERIC_LITERAL";
break;
case 122:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:>>>=)/,/^(?:>>=)/,/^(?:<<=)/,/^(?:\|=)/,/^(?:\^=)/,/^(?:&=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:;)/,/^(?:,)/,/^(?:\?)/,/^(?::)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\|)/,/^(?:\^)/,/^(?:&)/,/^(?:===)/,/^(?:==)/,/^(?:=)/,/^(?:!==)/,/^(?:!=)/,/^(?:<<)/,/^(?:<=)/,/^(?:<)/,/^(?:>>>)/,/^(?:>>)/,/^(?:>=)/,/^(?:>)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:!)/,/^(?:~)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:abstract)/,/^(?:boolean)/,/^(?:break)/,/^(?:byte)/,/^(?:case)/,/^(?:catch)/,/^(?:char)/,/^(?:class)/,/^(?:const)/,/^(?:continue)/,/^(?:default)/,/^(?:delete)/,/^(?:do)/,/^(?:double)/,/^(?:else)/,/^(?:extends)/,/^(?:final)/,/^(?:finally)/,/^(?:float)/,/^(?:for)/,/^(?:function)/,/^(?:goto)/,/^(?:if)/,/^(?:implements)/,/^(?:import)/,/^(?:in)/,/^(?:instanceof)/,/^(?:int)/,/^(?:interface)/,/^(?:long)/,/^(?:native)/,/^(?:new)/,/^(?:package)/,/^(?:private)/,/^(?:protected)/,/^(?:public)/,/^(?:return)/,/^(?:short)/,/^(?:static)/,/^(?:super)/,/^(?:switch)/,/^(?:synchronized)/,/^(?:throw)/,/^(?:throws)/,/^(?:transient)/,/^(?:try)/,/^(?:typeof)/,/^(?:var)/,/^(?:void)/,/^(?:volatile)/,/^(?:while)/,/^(?:with)/,/^(?:break)/,/^(?:continue)/,/^(?:delete)/,/^(?:else)/,/^(?:for)/,/^(?:function)/,/^(?:if)/,/^(?:in)/,/^(?:new)/,/^(?:return)/,/^(?:this)/,/^(?:typeof)/,/^(?:var)/,/^(?:void)/,/^(?:while)/,/^(?:with)/,/^(?:$)/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\"\"\\bfnrtv])|([^\"\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\"\"\\bfnrtv])|([^\"\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})))|(\\(\r\n|\r|\n)))*")))/,/^(?:(([$_a-zA-Z]|(\\[u]([0-9a-fA-F]){4}))(([$_a-zA-Z]|(\\[u]([0-9a-fA-F]){4}))|[0-9])*))/,/^(?:((([0]|(([1-9])([0-9]+)*))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([0]|(([1-9])([0-9]+)*))(([eE])([+-]?[0-9]+))?)))/,/^(?:([0][xX]([0-9a-fA-F])+))/,/^(?:([0]([0-7])+))/,/^(?:.)/],
conditions: {"REGEXP":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}